syntax = "proto3";

option go_package = "../proto";

service cwl {
  // Load will load a cwl file
  rpc Load(Doc) returns (Result) {}
  // Start will load an input and start an engine running
  rpc Start(Job) returns (Result) {}
  // Out will return the final result of workflow
  rpc Out(NotNeeded) returns (Output) {}
  // Pause send a signal to engine, it may block for a few second till engine received
  rpc Pause(NotNeeded) returns (Result) {}
  // Resume send a signal to engine, it may block for a few second till engine received
  rpc Resume(NotNeeded) returns (Result) {}
  // Abort send a signal to engine, it may block for a few second till engine received
  rpc Abort(NotNeeded) returns (Result) {}
  // Export can get all steps status, it's recommended to use after pause
  rpc Export(NotNeeded) returns (Status) {}
  // Import will import status to engine, thus running in a middle state
  rpc Import(Status) returns (Result) {}

  // Watch will hold a long connection to exchange important message with job.ms
  rpc Watch(stream Event) returns (stream Event) {}
}

// NotNeeded is an empty message used in functions that don't need args
message NotNeeded {}

// Result works like return value, and can contains details
message Result {
  bool success = 1;
  optional string info = 2;
}

// Doc is url to cwl file
message Doc {
  string name = 1;
  string token = 2;
}

// SingleAllocation describe a job's runtime
message SingleAllocation {
  string cluster = 1;
  string partition = 2;
  optional int64 cpu = 3;
  optional int64 gpu = 4;
  optional int64 memory = 5;
  optional int64 node = 6;
  optional string workdir = 7;
  map<string, string> extend = 8;
}

// Allocation is a collection of SingleAllocation
message Allocation {
  SingleAllocation default = 1;
  map<string, SingleAllocation> diff = 2;
}

// Job is inputs and job allocation
message Job {
  string uuid = 1;
  string values = 2;
  string username = 3;
  string token = 4;
  Allocation allocations = 5;
}

// Status is status of whole cwl engine
message Status {
  bool finish = 1;
  Result result = 2;
  repeated StepStatus steps = 3;
  optional Job job = 4;
}

// StepStatus contain all infos needed to describe a step's running
message StepStatus {
  string path = 1;
  string status = 2;
  string job = 3;
  optional string values = 5;
  optional string error = 4;
}

// Outputs is final result of workflow
message Output {
  Result result = 1;
  string values = 2;
}

// Event describe a task's status
message Event {
  string id = 1;
  string message = 2;
}