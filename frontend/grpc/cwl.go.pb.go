// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: cwl.go.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NotNeeded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NotNeeded) Reset() {
	*x = NotNeeded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cwl_go_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotNeeded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotNeeded) ProtoMessage() {}

func (x *NotNeeded) ProtoReflect() protoreflect.Message {
	mi := &file_cwl_go_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotNeeded.ProtoReflect.Descriptor instead.
func (*NotNeeded) Descriptor() ([]byte, []int) {
	return file_cwl_go_proto_rawDescGZIP(), []int{0}
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *string `protobuf:"bytes,1,opt,name=info,proto3,oneof" json:"info,omitempty"`
	Err  *string `protobuf:"bytes,2,opt,name=err,proto3,oneof" json:"err,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cwl_go_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_cwl_go_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_cwl_go_proto_rawDescGZIP(), []int{1}
}

func (x *Result) GetInfo() string {
	if x != nil && x.Info != nil {
		return *x.Info
	}
	return ""
}

func (x *Result) GetErr() string {
	if x != nil && x.Err != nil {
		return *x.Err
	}
	return ""
}

type Doc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Doc) Reset() {
	*x = Doc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cwl_go_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Doc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Doc) ProtoMessage() {}

func (x *Doc) ProtoReflect() protoreflect.Message {
	mi := &file_cwl_go_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Doc.ProtoReflect.Descriptor instead.
func (*Doc) Descriptor() ([]byte, []int) {
	return file_cwl_go_proto_rawDescGZIP(), []int{2}
}

func (x *Doc) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Job) Reset() {
	*x = Job{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cwl_go_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_cwl_go_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_cwl_go_proto_rawDescGZIP(), []int{3}
}

func (x *Job) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr map[string]string `protobuf:"bytes,1,rep,name=attr,proto3" json:"attr,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cwl_go_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_cwl_go_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_cwl_go_proto_rawDescGZIP(), []int{4}
}

func (x *Value) GetAttr() map[string]string {
	if x != nil {
		return x.Attr
	}
	return nil
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  *Result           `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Success []string          `protobuf:"bytes,2,rep,name=success,proto3" json:"success,omitempty"`
	Failed  []string          `protobuf:"bytes,3,rep,name=failed,proto3" json:"failed,omitempty"`
	Waiting []string          `protobuf:"bytes,4,rep,name=waiting,proto3" json:"waiting,omitempty"`
	Values  map[string]*Value `protobuf:"bytes,5,rep,name=Values,proto3" json:"Values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cwl_go_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_cwl_go_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_cwl_go_proto_rawDescGZIP(), []int{5}
}

func (x *Status) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *Status) GetSuccess() []string {
	if x != nil {
		return x.Success
	}
	return nil
}

func (x *Status) GetFailed() []string {
	if x != nil {
		return x.Failed
	}
	return nil
}

func (x *Status) GetWaiting() []string {
	if x != nil {
		return x.Waiting
	}
	return nil
}

func (x *Status) GetValues() map[string]*Value {
	if x != nil {
		return x.Values
	}
	return nil
}

var File_cwl_go_proto protoreflect.FileDescriptor

var file_cwl_go_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x77, 0x6c, 0x2e, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0b,
	0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x22, 0x49, 0x0a, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x15,
	0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x03, 0x65,
	0x72, 0x72, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x65, 0x72, 0x72, 0x22, 0x19, 0x0a, 0x03, 0x44, 0x6f, 0x63, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x19, 0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x66, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x1a, 0x37, 0x0a, 0x09, 0x41,
	0x74, 0x74, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xe5, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1f, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x06,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x41, 0x0a, 0x0b, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xdb, 0x01, 0x0a,
	0x03, 0x63, 0x77, 0x6c, 0x12, 0x17, 0x0a, 0x04, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x04, 0x2e, 0x44,
	0x6f, 0x63, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x18, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x04, 0x2e, 0x4a, 0x6f, 0x62, 0x1a, 0x07, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x1e, 0x0a, 0x05, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x12, 0x0a, 0x2e, 0x4e, 0x6f, 0x74, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x1a, 0x07, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x1f, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x12, 0x0a, 0x2e, 0x4e, 0x6f, 0x74, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x1a, 0x07, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x1e, 0x0a, 0x05, 0x41, 0x62, 0x6f, 0x72,
	0x74, 0x12, 0x0a, 0x2e, 0x4e, 0x6f, 0x74, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x1a, 0x07, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x1f, 0x0a, 0x06, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x0a, 0x2e, 0x4e, 0x6f, 0x74, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x1a, 0x07,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x1f, 0x0a, 0x06, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x0a, 0x2e, 0x4e, 0x6f, 0x74, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x1a,
	0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2e,
	0x2f, 0x67, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cwl_go_proto_rawDescOnce sync.Once
	file_cwl_go_proto_rawDescData = file_cwl_go_proto_rawDesc
)

func file_cwl_go_proto_rawDescGZIP() []byte {
	file_cwl_go_proto_rawDescOnce.Do(func() {
		file_cwl_go_proto_rawDescData = protoimpl.X.CompressGZIP(file_cwl_go_proto_rawDescData)
	})
	return file_cwl_go_proto_rawDescData
}

var file_cwl_go_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_cwl_go_proto_goTypes = []interface{}{
	(*NotNeeded)(nil), // 0: NotNeeded
	(*Result)(nil),    // 1: Result
	(*Doc)(nil),       // 2: Doc
	(*Job)(nil),       // 3: Job
	(*Value)(nil),     // 4: Value
	(*Status)(nil),    // 5: Status
	nil,               // 6: Value.AttrEntry
	nil,               // 7: Status.ValuesEntry
}
var file_cwl_go_proto_depIdxs = []int32{
	6,  // 0: Value.attr:type_name -> Value.AttrEntry
	1,  // 1: Status.result:type_name -> Result
	7,  // 2: Status.Values:type_name -> Status.ValuesEntry
	4,  // 3: Status.ValuesEntry.value:type_name -> Value
	2,  // 4: cwl.Load:input_type -> Doc
	3,  // 5: cwl.Start:input_type -> Job
	0,  // 6: cwl.Pause:input_type -> NotNeeded
	0,  // 7: cwl.Resume:input_type -> NotNeeded
	0,  // 8: cwl.Abort:input_type -> NotNeeded
	0,  // 9: cwl.Export:input_type -> NotNeeded
	0,  // 10: cwl.Import:input_type -> NotNeeded
	1,  // 11: cwl.Load:output_type -> Result
	1,  // 12: cwl.Start:output_type -> Result
	1,  // 13: cwl.Pause:output_type -> Result
	1,  // 14: cwl.Resume:output_type -> Result
	1,  // 15: cwl.Abort:output_type -> Result
	5,  // 16: cwl.Export:output_type -> Status
	1,  // 17: cwl.Import:output_type -> Result
	11, // [11:18] is the sub-list for method output_type
	4,  // [4:11] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_cwl_go_proto_init() }
func file_cwl_go_proto_init() {
	if File_cwl_go_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cwl_go_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotNeeded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cwl_go_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cwl_go_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Doc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cwl_go_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cwl_go_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cwl_go_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cwl_go_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cwl_go_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cwl_go_proto_goTypes,
		DependencyIndexes: file_cwl_go_proto_depIdxs,
		MessageInfos:      file_cwl_go_proto_msgTypes,
	}.Build()
	File_cwl_go_proto = out.File
	file_cwl_go_proto_rawDesc = nil
	file_cwl_go_proto_goTypes = nil
	file_cwl_go_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CwlClient is the client API for Cwl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CwlClient interface {
	Load(ctx context.Context, in *Doc, opts ...grpc.CallOption) (*Result, error)
	Start(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Result, error)
	Pause(ctx context.Context, in *NotNeeded, opts ...grpc.CallOption) (*Result, error)
	Resume(ctx context.Context, in *NotNeeded, opts ...grpc.CallOption) (*Result, error)
	Abort(ctx context.Context, in *NotNeeded, opts ...grpc.CallOption) (*Result, error)
	Export(ctx context.Context, in *NotNeeded, opts ...grpc.CallOption) (*Status, error)
	Import(ctx context.Context, in *NotNeeded, opts ...grpc.CallOption) (*Result, error)
}

type cwlClient struct {
	cc grpc.ClientConnInterface
}

func NewCwlClient(cc grpc.ClientConnInterface) CwlClient {
	return &cwlClient{cc}
}

func (c *cwlClient) Load(ctx context.Context, in *Doc, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/cwl/Load", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cwlClient) Start(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/cwl/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cwlClient) Pause(ctx context.Context, in *NotNeeded, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/cwl/Pause", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cwlClient) Resume(ctx context.Context, in *NotNeeded, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/cwl/Resume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cwlClient) Abort(ctx context.Context, in *NotNeeded, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/cwl/Abort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cwlClient) Export(ctx context.Context, in *NotNeeded, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/cwl/Export", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cwlClient) Import(ctx context.Context, in *NotNeeded, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/cwl/Import", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CwlServer is the server API for Cwl service.
type CwlServer interface {
	Load(context.Context, *Doc) (*Result, error)
	Start(context.Context, *Job) (*Result, error)
	Pause(context.Context, *NotNeeded) (*Result, error)
	Resume(context.Context, *NotNeeded) (*Result, error)
	Abort(context.Context, *NotNeeded) (*Result, error)
	Export(context.Context, *NotNeeded) (*Status, error)
	Import(context.Context, *NotNeeded) (*Result, error)
}

// UnimplementedCwlServer can be embedded to have forward compatible implementations.
type UnimplementedCwlServer struct {
}

func (*UnimplementedCwlServer) Load(context.Context, *Doc) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Load not implemented")
}
func (*UnimplementedCwlServer) Start(context.Context, *Job) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedCwlServer) Pause(context.Context, *NotNeeded) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (*UnimplementedCwlServer) Resume(context.Context, *NotNeeded) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resume not implemented")
}
func (*UnimplementedCwlServer) Abort(context.Context, *NotNeeded) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Abort not implemented")
}
func (*UnimplementedCwlServer) Export(context.Context, *NotNeeded) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Export not implemented")
}
func (*UnimplementedCwlServer) Import(context.Context, *NotNeeded) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Import not implemented")
}

func RegisterCwlServer(s *grpc.Server, srv CwlServer) {
	s.RegisterService(&_Cwl_serviceDesc, srv)
}

func _Cwl_Load_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Doc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CwlServer).Load(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cwl/Load",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CwlServer).Load(ctx, req.(*Doc))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cwl_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CwlServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cwl/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CwlServer).Start(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cwl_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotNeeded)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CwlServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cwl/Pause",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CwlServer).Pause(ctx, req.(*NotNeeded))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cwl_Resume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotNeeded)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CwlServer).Resume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cwl/Resume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CwlServer).Resume(ctx, req.(*NotNeeded))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cwl_Abort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotNeeded)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CwlServer).Abort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cwl/Abort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CwlServer).Abort(ctx, req.(*NotNeeded))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cwl_Export_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotNeeded)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CwlServer).Export(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cwl/Export",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CwlServer).Export(ctx, req.(*NotNeeded))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cwl_Import_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotNeeded)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CwlServer).Import(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cwl/Import",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CwlServer).Import(ctx, req.(*NotNeeded))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cwl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cwl",
	HandlerType: (*CwlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Load",
			Handler:    _Cwl_Load_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _Cwl_Start_Handler,
		},
		{
			MethodName: "Pause",
			Handler:    _Cwl_Pause_Handler,
		},
		{
			MethodName: "Resume",
			Handler:    _Cwl_Resume_Handler,
		},
		{
			MethodName: "Abort",
			Handler:    _Cwl_Abort_Handler,
		},
		{
			MethodName: "Export",
			Handler:    _Cwl_Export_Handler,
		},
		{
			MethodName: "Import",
			Handler:    _Cwl_Import_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cwl.go.proto",
}
